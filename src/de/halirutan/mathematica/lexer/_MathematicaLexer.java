/* The following code was generated by JFlex 1.4.3 on 3/3/15 3:06 AM */

package de.halirutan.mathematica.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.LinkedList;
import de.halirutan.mathematica.parsing.MathematicaElementTypes;

@SuppressWarnings("ALL")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/3/15 3:06 AM from the specification file
 * <tt>/home/patrick/workspace/Mathematica-IntelliJ-Plugin/src/de/halirutan/mathematica/lexer/Mathematica.flex</tt>
 */
class _MathematicaLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PUT_START = 6;
  public static final int GET_START = 10;
  public static final int IN_STRING = 4;
  public static final int YYINITIAL = 0;
  public static final int PUT_RHS = 8;
  public static final int GET_RHS = 12;
  public static final int IN_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\0\1\3\1\2\22\0\1\54\1\43\1\30"+
    "\1\26\1\7\1\27\1\51\1\52\1\4\1\6\1\5\1\44\1\46"+
    "\1\25\1\23\1\37\1\10\1\22\1\16\1\17\1\20\1\20\1\20"+
    "\1\21\1\21\1\21\1\40\1\42\1\33\1\41\1\35\1\50\1\36"+
    "\32\53\1\13\1\12\1\14\1\24\1\47\1\11\32\15\1\31\1\34"+
    "\1\32\1\45\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\4\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\2\1\13\1\14\4\11"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\5\1\2\45\1\46\1\47\1\2\1\47\1\50\1\51"+
    "\2\52\1\53\1\54\1\55\1\56\1\10\1\0\2\11"+
    "\1\57\2\4\2\0\1\60\1\0\1\61\1\62\1\63"+
    "\1\64\1\65\1\20\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\1\114\1\0\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\1\125\2\0\2\45\1\0\1\11"+
    "\4\0\1\126\1\127\1\130\1\131\1\132\1\133\1\134"+
    "\1\135\1\136\1\137\1\0\1\140\1\11\1\0\1\11"+
    "\1\10\1\11\1\0\1\11\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u010e\0\u01ef\0\u021c\0\u0249\0\u0276"+
    "\0\u010e\0\u010e\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384"+
    "\0\u03b1\0\u03de\0\u040b\0\u010e\0\u010e\0\u010e\0\u0438\0\u0465"+
    "\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd"+
    "\0\u05fa\0\u010e\0\u0627\0\u010e\0\u0654\0\u010e\0\u0681\0\u0195"+
    "\0\u06ae\0\u010e\0\u06db\0\u0708\0\u0735\0\u010e\0\u010e\0\u0762"+
    "\0\u0762\0\u078f\0\u07bc\0\u010e\0\u0762\0\u07e9\0\u010e\0\u010e"+
    "\0\u010e\0\u0816\0\u0843\0\u0870\0\u089d\0\u010e\0\u010e\0\u08ca"+
    "\0\u08f7\0\u0924\0\u0951\0\u097e\0\u010e\0\u010e\0\u010e\0\u010e"+
    "\0\u09ab\0\u09d8\0\u0a05\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e"+
    "\0\u010e\0\u0a32\0\u010e\0\u010e\0\u0a5f\0\u010e\0\u010e\0\u010e"+
    "\0\u0a8c\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u0ab9"+
    "\0\u0ae6\0\u0b13\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e"+
    "\0\u0b40\0\u010e\0\u010e\0\u0b6d\0\u0b9a\0\u010e\0\u0bc7\0\u0bf4"+
    "\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u010e\0\u010e\0\u010e"+
    "\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u0d02"+
    "\0\u010e\0\u0d2f\0\u0d2f\0\u0d5c\0\u010e\0\u0d89\0\u0db6\0\u0de3"+
    "\0\u010e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\2\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\15\1\23\1\24\2\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\15\1\11\4\57\1\60\1\61\1\62\31\57"+
    "\1\63\14\57\12\64\1\65\15\64\1\66\24\64\1\67"+
    "\1\70\1\71\1\72\50\67\1\72\1\73\2\70\2\7"+
    "\1\73\1\7\4\73\2\7\7\73\1\7\1\73\11\7"+
    "\2\73\2\7\1\73\1\7\1\73\1\7\3\73\1\7"+
    "\1\73\1\7\1\74\1\70\1\75\1\76\50\74\1\76"+
    "\56\0\2\10\55\0\1\11\50\0\1\11\5\0\1\77"+
    "\54\0\1\100\33\0\1\101\22\0\2\15\1\102\3\0"+
    "\6\15\30\0\1\15\6\0\1\103\2\0\1\16\1\104"+
    "\4\0\5\16\1\105\40\0\1\15\1\0\1\106\3\0"+
    "\1\15\35\0\1\15\2\0\1\107\1\110\10\0\1\111"+
    "\46\0\1\103\2\0\1\25\1\104\4\0\5\25\1\105"+
    "\1\112\35\0\1\103\2\0\1\25\1\104\4\0\3\25"+
    "\1\16\1\25\1\105\1\112\35\0\1\103\2\0\1\16"+
    "\1\104\4\0\5\16\1\105\1\112\35\0\1\103\2\0"+
    "\1\25\1\104\4\0\5\25\1\105\41\0\1\105\5\0"+
    "\5\105\1\113\71\0\1\114\1\115\40\0\1\116\7\0"+
    "\1\117\3\0\1\120\22\0\1\121\1\122\4\0\1\121"+
    "\5\122\3\0\1\123\24\0\1\121\30\0\1\33\60\0"+
    "\1\124\1\125\1\126\3\0\1\127\47\0\1\130\1\131"+
    "\54\0\1\132\3\0\1\133\20\0\1\134\30\0\1\135"+
    "\23\0\1\136\15\0\1\137\12\0\1\140\1\141\1\142"+
    "\1\143\1\144\47\0\1\145\2\0\1\146\1\147\36\0"+
    "\1\150\15\0\1\151\1\0\1\152\53\0\1\153\53\0"+
    "\1\154\54\0\1\155\2\0\1\156\55\0\1\157\32\0"+
    "\1\160\23\0\1\161\56\0\1\162\3\0\4\57\3\0"+
    "\31\57\1\0\14\57\6\0\1\163\106\0\1\164\12\0"+
    "\1\165\1\0\12\64\1\0\15\64\1\0\24\64\1\0"+
    "\1\166\1\167\7\0\1\166\15\0\1\166\25\0\2\70"+
    "\55\0\1\72\50\0\1\72\1\73\4\0\1\73\1\0"+
    "\4\73\2\0\7\73\1\0\1\73\11\0\2\73\2\0"+
    "\1\73\1\0\1\73\1\0\3\73\1\0\1\73\4\0"+
    "\1\76\50\0\1\76\7\0\1\15\5\0\1\15\35\0"+
    "\1\15\25\0\1\170\35\0\1\103\2\0\1\171\1\172"+
    "\4\0\5\171\1\173\36\0\1\103\2\0\1\105\1\104"+
    "\4\0\5\105\33\0\1\107\62\0\1\174\5\0\1\174"+
    "\35\0\1\174\25\0\1\175\53\0\1\176\72\0\1\177"+
    "\22\0\2\121\4\0\6\121\30\0\1\121\11\0\1\122"+
    "\5\0\5\122\42\0\1\123\5\0\5\123\67\0\1\200"+
    "\55\0\1\201\41\0\1\202\12\0\1\203\26\0\1\204"+
    "\5\0\5\204\73\0\1\205\54\0\1\206\62\0\1\207"+
    "\60\0\1\210\16\0\1\165\22\0\1\211\12\0\2\165"+
    "\1\0\1\166\63\0\1\212\5\0\5\212\2\0\1\213"+
    "\34\0\1\103\2\0\1\171\5\0\5\171\1\214\41\0"+
    "\1\171\5\0\5\171\1\173\41\0\1\214\5\0\5\214"+
    "\41\0\2\174\3\0\1\215\6\174\30\0\1\174\11\0"+
    "\1\216\4\0\6\216\30\0\1\216\16\0\1\210\22\0"+
    "\1\217\12\0\1\210\11\0\1\212\5\0\5\212\37\0"+
    "\1\103\2\0\1\214\5\0\5\214\42\0\1\216\1\104"+
    "\3\0\6\216\1\220\27\0\1\216\41\0\1\221\24\0"+
    "\1\220\1\104\3\0\6\220\30\0\1\220\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3600];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\4\0\1\11\4\1\1\11\4\1\2\11"+
    "\11\1\3\11\13\1\1\11\1\1\1\11\1\1\1\11"+
    "\3\1\1\11\3\1\2\11\4\1\1\11\2\1\3\11"+
    "\1\1\1\0\2\1\2\11\1\1\2\0\1\1\1\0"+
    "\4\11\3\1\6\11\1\1\2\11\1\1\3\11\1\1"+
    "\6\11\2\1\1\0\6\11\1\1\2\11\2\0\1\11"+
    "\1\1\1\0\1\1\4\0\12\11\1\0\1\11\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    // This adds support for nested states. I'm no JFlex pro, so maybe this is overkill, but it works quite well.
    private final LinkedList<Integer> states = new LinkedList<Integer>();

    private void yypushstate(int state) {
        states.addFirst(yystate());
        yybegin(state);
    }
    private void yypopstate() {
        final int state = states.removeFirst();
        yybegin(state);
    }



  _MathematicaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _MathematicaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 106) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { return MathematicaElementTypes.TIMES;
          }
        case 98: break;
        case 4: 
          { return MathematicaElementTypes.WHITE_SPACE;
          }
        case 99: break;
        case 43: 
          { yybegin(GET_RHS); return MathematicaElementTypes.WHITE_SPACE;
          }
        case 100: break;
        case 39: 
          { yypushback(1); yybegin(PUT_RHS);
          }
        case 101: break;
        case 25: 
          { return MathematicaElementTypes.DIVIDE;
          }
        case 102: break;
        case 11: 
          { return MathematicaElementTypes.LEFT_BRACKET;
          }
        case 103: break;
        case 63: 
          { return MathematicaElementTypes.COMPOSITION;
          }
        case 104: break;
        case 78: 
          { return MathematicaElementTypes.UNEQUAL;
          }
        case 105: break;
        case 40: 
          { yybegin(PUT_RHS); return MathematicaElementTypes.WHITE_SPACE;
          }
        case 106: break;
        case 83: 
          { return MathematicaElementTypes.BLANK_SEQUENCE;
          }
        case 107: break;
        case 96: 
          { return MathematicaElementTypes.COMMENT_ANNOTATION;
          }
        case 108: break;
        case 69: 
          { return MathematicaElementTypes.TAG_SET;
          }
        case 109: break;
        case 59: 
          { return MathematicaElementTypes.OR;
          }
        case 110: break;
        case 31: 
          { return MathematicaElementTypes.INFIX_CALL;
          }
        case 111: break;
        case 1: 
          { return MathematicaElementTypes.COMMENT_CONTENT;
          }
        case 112: break;
        case 75: 
          { return MathematicaElementTypes.UNSET;
          }
        case 113: break;
        case 72: 
          { return MathematicaElementTypes.RULE_DELAYED;
          }
        case 114: break;
        case 49: 
          { return MathematicaElementTypes.UP_SET;
          }
        case 115: break;
        case 55: 
          { yybegin(GET_START); return MathematicaElementTypes.GET;
          }
        case 116: break;
        case 41: 
          { yybegin(YYINITIAL); return MathematicaElementTypes.STRINGIFIED_IDENTIFIER;
          }
        case 117: break;
        case 81: 
          { return MathematicaElementTypes.STRING_EXPRESSION;
          }
        case 118: break;
        case 53: 
          { return MathematicaElementTypes.ASSOCIATION_SLOT;
          }
        case 119: break;
        case 17: 
          { return MathematicaElementTypes.OUT;
          }
        case 120: break;
        case 5: 
          { return MathematicaElementTypes.LEFT_PAR;
          }
        case 121: break;
        case 54: 
          { return MathematicaElementTypes.SLOT_SEQUENCE;
          }
        case 122: break;
        case 18: 
          { yypushstate(IN_STRING); return MathematicaElementTypes.STRING_LITERAL_BEGIN;
          }
        case 123: break;
        case 58: 
          { return MathematicaElementTypes.LESS_EQUAL;
          }
        case 124: break;
        case 33: 
          { return MathematicaElementTypes.BLANK;
          }
        case 125: break;
        case 22: 
          { return MathematicaElementTypes.ALTERNATIVE;
          }
        case 126: break;
        case 66: 
          { return MathematicaElementTypes.REPLACE_ALL;
          }
        case 127: break;
        case 51: 
          { return MathematicaElementTypes.RULE;
          }
        case 128: break;
        case 86: 
          { return MathematicaElementTypes.REPEATED_NULL;
          }
        case 129: break;
        case 82: 
          { return MathematicaElementTypes.DEFAULT;
          }
        case 130: break;
        case 28: 
          { return MathematicaElementTypes.SEMICOLON;
          }
        case 131: break;
        case 16: 
          { return MathematicaElementTypes.SLOT;
          }
        case 132: break;
        case 29: 
          { return MathematicaElementTypes.EXCLAMATION_MARK;
          }
        case 133: break;
        case 15: 
          { return MathematicaElementTypes.MINUS;
          }
        case 134: break;
        case 42: 
          { yypushback(1); yybegin(GET_RHS);
          }
        case 135: break;
        case 9: 
          { return MathematicaElementTypes.NUMBER;
          }
        case 136: break;
        case 62: 
          { return MathematicaElementTypes.GREATER_EQUAL;
          }
        case 137: break;
        case 89: 
          { return MathematicaElementTypes.APPLY1;
          }
        case 138: break;
        case 12: 
          { return MathematicaElementTypes.RIGHT_BRACKET;
          }
        case 139: break;
        case 67: 
          { return MathematicaElementTypes.MAP;
          }
        case 140: break;
        case 60: 
          { return MathematicaElementTypes.RIGHT_ASSOCIATION;
          }
        case 141: break;
        case 85: 
          { yypopstate(); return MathematicaElementTypes.COMMENT_END;
          }
        case 142: break;
        case 34: 
          { return MathematicaElementTypes.QUESTION_MARK;
          }
        case 143: break;
        case 20: 
          { return MathematicaElementTypes.RIGHT_BRACE;
          }
        case 144: break;
        case 74: 
          { return MathematicaElementTypes.SET_DELAYED;
          }
        case 145: break;
        case 73: 
          { return MathematicaElementTypes.DOUBLE_COLON;
          }
        case 146: break;
        case 19: 
          { return MathematicaElementTypes.LEFT_BRACE;
          }
        case 147: break;
        case 87: 
          { return MathematicaElementTypes.UP_SET_DELAYED;
          }
        case 148: break;
        case 36: 
          { return MathematicaElementTypes.DERIVATIVE;
          }
        case 149: break;
        case 3: 
          { return MathematicaElementTypes.LINE_BREAK;
          }
        case 150: break;
        case 64: 
          { return MathematicaElementTypes.APPLY;
          }
        case 151: break;
        case 21: 
          { return MathematicaElementTypes.LESS;
          }
        case 152: break;
        case 7: 
          { return MathematicaElementTypes.RIGHT_PAR;
          }
        case 153: break;
        case 80: 
          { return MathematicaElementTypes.INCREMENT;
          }
        case 154: break;
        case 44: 
          { yypushstate(IN_COMMENT); return MathematicaElementTypes.COMMENT_START;
          }
        case 155: break;
        case 70: 
          { return MathematicaElementTypes.DIVIDE_BY;
          }
        case 156: break;
        case 76: 
          { return MathematicaElementTypes.EQUAL;
          }
        case 157: break;
        case 61: 
          { yybegin(PUT_START); return MathematicaElementTypes.PUT;
          }
        case 158: break;
        case 24: 
          { return MathematicaElementTypes.PREFIX_CALL;
          }
        case 159: break;
        case 79: 
          { return MathematicaElementTypes.ADD_TO;
          }
        case 160: break;
        case 2: 
          { return MathematicaElementTypes.BAD_CHARACTER;
          }
        case 161: break;
        case 56: 
          { return MathematicaElementTypes.LEFT_ASSOCIATION;
          }
        case 162: break;
        case 14: 
          { return MathematicaElementTypes.POWER;
          }
        case 163: break;
        case 26: 
          { return MathematicaElementTypes.COLON;
          }
        case 164: break;
        case 92: 
          { yypushback(2); return MathematicaElementTypes.SET;
          }
        case 165: break;
        case 68: 
          { return MathematicaElementTypes.POSTFIX;
          }
        case 166: break;
        case 10: 
          { return MathematicaElementTypes.BACK_TICK;
          }
        case 167: break;
        case 57: 
          { return MathematicaElementTypes.STRING_JOIN;
          }
        case 168: break;
        case 88: 
          { yybegin(PUT_START); return MathematicaElementTypes.PUT_APPEND;
          }
        case 169: break;
        case 13: 
          { return MathematicaElementTypes.POINT;
          }
        case 170: break;
        case 90: 
          { return MathematicaElementTypes.REPLACE_REPEATED;
          }
        case 171: break;
        case 95: 
          { return MathematicaElementTypes.BLANK_NULL_SEQUENCE;
          }
        case 172: break;
        case 84: 
          { return MathematicaElementTypes.AND;
          }
        case 173: break;
        case 45: 
          { return MathematicaElementTypes.NON_COMMUTATIVE_MULTIPLY;
          }
        case 174: break;
        case 50: 
          { return MathematicaElementTypes.DECREMENT;
          }
        case 175: break;
        case 38: 
          { yypopstate(); return MathematicaElementTypes.STRING_LITERAL_END;
          }
        case 176: break;
        case 65: 
          { return MathematicaElementTypes.RIGHT_COMPOSITION;
          }
        case 177: break;
        case 47: 
          { return MathematicaElementTypes.ACCURACY;
          }
        case 178: break;
        case 23: 
          { return MathematicaElementTypes.GREATER;
          }
        case 179: break;
        case 46: 
          { return MathematicaElementTypes.TIMES_BY;
          }
        case 180: break;
        case 94: 
          { return MathematicaElementTypes.UNSAME_Q;
          }
        case 181: break;
        case 37: 
          { return MathematicaElementTypes.STRING_LITERAL;
          }
        case 182: break;
        case 97: 
          { return MathematicaElementTypes.COMMENT_SECTION;
          }
        case 183: break;
        case 48: 
          { return MathematicaElementTypes.REPEATED;
          }
        case 184: break;
        case 71: 
          { return MathematicaElementTypes.CONDITION;
          }
        case 185: break;
        case 32: 
          { return MathematicaElementTypes.COMMA;
          }
        case 186: break;
        case 27: 
          { return MathematicaElementTypes.SET;
          }
        case 187: break;
        case 52: 
          { return MathematicaElementTypes.SUBTRACT_FROM;
          }
        case 188: break;
        case 77: 
          { return MathematicaElementTypes.SPAN;
          }
        case 189: break;
        case 8: 
          { return MathematicaElementTypes.IDENTIFIER;
          }
        case 190: break;
        case 91: 
          { return MathematicaElementTypes.MAP_ALL;
          }
        case 191: break;
        case 93: 
          { return MathematicaElementTypes.SAME_Q;
          }
        case 192: break;
        case 30: 
          { return MathematicaElementTypes.PLUS;
          }
        case 193: break;
        case 35: 
          { return MathematicaElementTypes.FUNCTION;
          }
        case 194: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
